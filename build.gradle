plugins {
    id "com.jfrog.artifactory" version "4.8.1"
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish'

project.ext {
    jobDslVersion = '1.82'
    jenkinsCoreVersion = '2.414.3'
    jenkinsTestHarnessVersion = '2104.v8d1866dd0ea_f'

    testDependenciesOutputDirectory = new File(sourceSets.test.output.resourcesDir, 'test-dependencies')
    artifactoryUri = System.getenv("ARTIFACTORY_URI")
    publishingRepoKey = getArtifactoryRepoKey()
    publishingRepoUsername = System.getenv("PUBLISHING_REPO_USERNAME")
    publishingRepoPassword = System.getenv("PUBLISHING_REPO_PASSWORD")
}

configurations {
    testPlugins {}

    // see JENKINS-45512
    testCompile {
        exclude group: 'xalan'
        exclude group: 'xerces'
    }
}

sourceSets {
    test {
        resources {
            srcDirs = ['src/test/resources', sourceSets.test.output.resourcesDir]
        }
    }
}

repositories {
    maven { url 'https://repo.jenkins-ci.org/public/' }
    maven { url 'https://repo.jenkins-ci.org/releases/' }
    jcenter()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.12'
    compile ('com.google.guava:guava:11.0.1') {
        exclude module: 'jsr305'
    }
    compile ("org.jenkins-ci.plugins:job-dsl-core:${jobDslVersion}") {
        exclude module: 'ivy'
        exclude module: 'xstream'
    }

    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'

    /**
     * AbstractJobSpec relies on JUnit 4 features such as @ClassRule in order
     * to load the in-memory Jenkins instance. Whilst recent versions of
     * jenkins-test-harness support Junit 5, via the @WithJenkins annotation,
     * it would require a significant effort to refactor AbstractJobSpec to use
     * the new annotation. Until we're ready to do that work we have pinned
     * the JUnit platform to JUnit 4
     */
    testImplementation("junit:junit:4.13.2")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.9.3")

    // Jenkins test harness dependencies
    testCompile "org.jenkins-ci.main:jenkins-test-harness:${jenkinsTestHarnessVersion}"
    testCompile "org.jenkins-ci.main:jenkins-war:${jenkinsCoreVersion}"

    // Job DSL plugin including plugin dependencies
    testCompile "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}"
    testCompile "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}@jar"
    testCompile 'org.jenkins-ci.plugins:structs:1.6@jar'

    // plugins to install in test instance
    testPlugins 'com.coravy.hudson.plugins.github:github:1.37.3'
    testPlugins 'io.jenkins.plugins:caffeine-api:3.1.8-133.v17b_1ff2e0599'
    testPlugins 'org.jenkins-ci.plugins:ansicolor:1.0.2'
    testPlugins 'org.jenkins-ci.plugins:build-monitor-plugin:1.14-653.va_1c684a_30b_ff'
    testPlugins 'org.jenkins-ci.plugins:build-timeout:1.28'
    testPlugins 'org.jenkins-ci.plugins:build-user-vars-plugin:1.9'
    testPlugins 'org.jenkins-ci.plugins:claim:516.v36293563731d'
    testPlugins 'org.jenkins-ci.plugins:cloudbees-folder:6.848.ve3b_fd7839a_81'
    testPlugins 'org.jenkins-ci.plugins:envinject:2.901.v0038b_6471582'
    testPlugins 'org.jenkins-ci.plugins:git:5.2.0'
    testPlugins 'org.jenkins-ci.plugins:htmlpublisher:1.32'
    testPlugins 'org.jenkins-ci.plugins:junit:1240.vf9529b_881428'
    testPlugins 'org.jenkins-ci.plugins:matrix-auth:3.1.6'
    testPlugins 'org.jenkins-ci.plugins:matrix-project:789.v57a_725b_63c79'
    testPlugins 'org.jenkins-ci.plugins:nodejs:1.6.1'
    testPlugins 'org.jenkins-ci.plugins:Parameterized-Remote-Trigger:3.1.5.1'
    testPlugins 'org.jenkins-ci.plugins:parameterized-trigger:2.45'
    testPlugins 'org.jenkins-ci.plugins:postbuildscript:3.2.0-460.va_fda_0fa_26720'
    testPlugins 'org.jenkins-ci.plugins:preSCMbuildstep:44.v6ef4fd97f56e'
    testPlugins 'org.jenkins-ci.plugins:timestamper:1.26'
    testPlugins 'org.jenkins-ci.plugins:throttle-concurrents:2.14'
    testPlugins 'org.jenkins-ci.plugins:urltrigger:1.02'
    testPlugins 'org.jenkins-ci.plugins:ws-cleanup:0.44'
    testPlugins 'org.jvnet.hudson.plugins:postbuild-task:1.9'

    // Plugins which ideally we would install, but they cause other plugins to downgrade and tests to break
    // testPlugins 'org.jenkins-ci.plugins:description-setter:1.10'
    // testPlugins 'org.jenkins-ci.plugins:ghprb:1.42.2'
}

version = getReleaseVersion()
logger.quiet("Project version is: ${project.version}")
group = 'uk.gov.hmrc'

task resolveTestPlugins(type: Copy) {
    from configurations.testPlugins
    into testDependenciesOutputDirectory
    include '*.hpi'
    include '*.jpi'
    mustRunAfter compileJava
}

task writePluginIndexFile(type: DefaultTask, dependsOn: resolveTestPlugins) {
    doFirst {
        def baseNames = resolveTestPlugins.source.collect {
            it.name[0..it.name.lastIndexOf('.') - 1]
        }.sort()
        logger.info("Copied plugins for tests.")

        new File(resolveTestPlugins.destinationDir, 'index').setText(baseNames.join('\n'), 'UTF-8')
        logger.info("Created plugin index file.")
    }
}

test {
    dependsOn tasks.writePluginIndexFile
    inputs.files sourceSets.test.groovy.srcDirs, sourceSets.test.output.resourcesDir

    // set build directory for Jenkins test harness, JENKINS-26331
    systemProperty 'buildDirectory', project.buildDir.absolutePath
}

// Apply generic configuration to all Test tasks.
tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        showStandardStreams true
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

publishing {
    publications {
        jenkinsJobBuilders(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

artifactoryDeploy {
    doFirst {
        validatePublishingConfiguration()
    }
}

artifactory {
    contextUrl = project.artifactoryUri
    publish {
        repository {
            repoKey = project.publishingRepoKey
            username = project.publishingRepoUsername
            password = project.publishingRepoPassword
        }
        defaults {
            publications('jenkinsJobBuilders')
        }
        publishBuildInfo = true
        publishArtifacts = true
        publishPom = true
    }
}

private validatePublishingConfiguration() {
    boolean isReleaseVersion = isReleaseVersion()
    final Set<String> requiredPublishingEnvVars = ["ARTIFACTORY_URI", "PUBLISHING_REPO_USERNAME", "PUBLISHING_REPO_PASSWORD"]
    if(isReleaseVersion) {
        requiredPublishingEnvVars << "RELEASES_PUBLISHING_REPO"
    }
    else {
        requiredPublishingEnvVars << "SNAPSHOTS_PUBLISHING_REPO"
    }
    requiredPublishingEnvVars.each { envVar ->
        if(!System.getenv(envVar)) {
            throw new GradleException("Environment variable '${envVar}' is required to publish ${isReleaseVersion ? "releases" : "snapshots"} to Artifactory, but was not provided.")
        }
    }
}

private String getReleaseVersion() {
    return project.hasProperty("releaseVersion") ? project.releaseVersion.replaceAll('release/', '') : 'unnumbered-development-build'
}

private boolean isReleaseVersion() {
    final boolean isReleaseVersion = (getReleaseVersion() ==~ /^[0-9]+\.[0-9]+\.[0-9]+$/)
    logger.quiet("Specified releaseVersion '${getReleaseVersion()}' has been identified as a ${isReleaseVersion ? "release" : "snapshot"} version.")
    return isReleaseVersion
}

private String getArtifactoryRepoKey() {
    final String repoKeyEnvVar = isReleaseVersion() ? "RELEASES_PUBLISHING_REPO" : "SNAPSHOTS_PUBLISHING_REPO"
    final String repoKey = System.getenv(repoKeyEnvVar)
    logger.quiet("Artifactory repo key is: ${repoKey}")
    return repoKey
}

tasks.install.dependsOn(build)
tasks.artifactoryPublish.dependsOn(check)
